#!/usr/bin/python

from array import array
import csv

f = open("../firmware/src/src/targets/nrf52/blechars.cpp","w")
f.write("""\
/*
* This file is part of the Head Tracker distribution (https://github.com/dlktdr/headtracker)
* Copyright (c) 2022 Cliff Blackburn
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**********************************************
 *
 *  !!! THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT DIRECTLY !!!
 *
 *  Modify /utils/settings.csv and execute buildsettings.py to generate this source file
 *
 ***********************************************/

/* This file contains the settings which are be adjustable via Bluetooth Web App
 */

#include "blechars.h"
#include "trackersettings.h"
#include "log.h"

""")

# CSV Column's
coltype = 0
coldata = 1
colname = 2
coldefault = 3
colmin = 4
colmax = 5
coldesc = 6
colfwonevnt = 7
coldivisor = 8
colround = 9
colbleaddr = 10

const = list()
data = list()
dataarrays = list()
settings = list()
settingsarrays = list()

with open('settings.csv', newline='') as csvfile:
    setns = csv.reader(csvfile, delimiter=',', quotechar='\"')
    itersetns = iter(setns)
    next(itersetns)
    for row in setns:
        if "const" in row[coldata].lower():
          const.append(row)
        if "setting" in row[coldata].lower():
          if "[" in row[colname]:
            settingsarrays.append(row)
          else:
            settings.append(row)
        if "data" in row[coldata].lower():
          if "[" in row[colname]:
            dataarrays.append(row)
          else:
            data.append(row)

def typeToJson(type) :
  if type == "float":
    return "flt"
  if type == "double":
    return "dbl"
  if type == "char":
    return "chr"
  return type

def typeToC(type) :
  if type == "u8":
    return "uint8_t"
  if type == "s8":
    return "int8_t"
  if type == "u16":
    return "uint16_t"
  if type == "s16":
    return "int16_t"
  if type == "u32":
    return "uint32_t"
  if type == "s32":
    return "int32_t"
  return type

# Data Storage Variables
for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].lower().strip()
    addr = row[colbleaddr].upper().strip()
    f.write(typeToC(row[coltype].strip()) + " bt_" + name + ";\n")

f.write("\n")

for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].lower().strip()
    addr = row[colbleaddr].upper().strip()
    f.write("struct bt_uuid_16 bt_uuid_" + name + " = BT_UUID_INIT_16(0x" + addr + ");\n")

f.write("\n")

for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].strip()
    addr = row[colbleaddr].upper().strip()
    f.write("""\
ssize_t btwr_{lowername}(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{{
  if(len == sizeof({ctype})) {{
    LOGD("BT_Wr {name} (0x{addr})");
    trkset.set{name}(*({ctype}*)buf);
  }}
  return len;
}}
ssize_t btrd_{lowername}(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf, uint16_t len, uint16_t offset)
{{
  char *value = (char *)attr->user_data;
  LOGD("BT_Rd {name} (0x{addr})");
  bt_{lowername} = trkset.get{name}();
  return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof({ctype}));
}}

""".format(name = name, lowername = name.lower(), addr = addr, ctype = typeToC(row[coltype])))

f.close()

f = open("../firmware/src/src/targets/nrf52/blechars.h","w")
f.write("""\
/*
* This file is part of the Head Tracker distribution (https://github.com/dlktdr/headtracker)
* Copyright (c) 2022 Cliff Blackburn
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**********************************************
 *
 *  !!! THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT DIRECTLY !!!
 *
 *  Modify /utils/settings.csv and execute buildsettings.py to generate this bluetooth header
 *
 ***********************************************/

/* This file contains the settings which are be adjustable via Bluetooth Web App
 */

#pragma once

#include <zephyr.h>

#include <bluetooth/bluetooth.h>
#include <bluetooth/conn.h>
#include <bluetooth/gatt.h>
#include <bluetooth/hci.h>
#include <bluetooth/uuid.h>

""")

# Data Storage Variables
for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].lower().strip()
    addr = row[colbleaddr].upper().strip()
    f.write("extern " + typeToC(row[coltype].strip()) + " bt_" + name + ";\n")

f.write("\n")

for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].lower().strip()
    addr = row[colbleaddr].upper().strip()
    f.write("extern struct bt_uuid_16 bt_uuid_" + name + ";\n")

f.write("\n")

for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].strip()
    addr = row[colbleaddr].upper().strip()
    f.write("""\
ssize_t btwr_{lowername}(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset, uint8_t flags);
ssize_t btrd_{lowername}(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf, uint16_t len, uint16_t offset);
""".format(name = name, lowername = name.lower(), addr = addr, ctype = typeToC(row[coltype])))

f.write("\n#define AUTOGENERATED_CHARACTERISTICS \\\n")

for row in settings:
  if row[colbleaddr].strip() != "":
    name = row[colname].lower().strip()
    addr = row[colbleaddr].upper().strip()
    f.write("""\
    ,BT_GATT_CHARACTERISTIC(&bt_uuid_{lowername}.uuid, BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE, \\
                                                   BT_GATT_PERM_READ | BT_GATT_PERM_WRITE, \\
                                                   btrd_{lowername}, btwr_{lowername}, (void*)&bt_{lowername}) \\
""".format(name = name, lowername = name.lower(), addr = addr, ctype = typeToC(row[coltype])))

f.write("\n")

f.close()


print("Gernerated Firmware Bluetooth Settings")
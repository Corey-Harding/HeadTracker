#!/usr/bin/python

from array import array
import csv

import set_common as s

f = open("../web_configurator/blechars.js","w")
f.write("""\
//
//
//  !!! THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT DIRECTLY !!!
//
//  Modify /utils/settings.csv and execute buildsettings.py to generate this source file
//
//  This file includes all the characteristics which are editable
//   Copy and pasted them into code as required (TOOD, automate more)

let radioService;
""")

# Read the settings
s.readSettings()

# Data Storage Variables
for row in s.settings:
  if row[s.colbleaddr].strip() != "":
    name = row[s.colname].lower().strip()
    addr = row[s.colbleaddr].upper().strip()
    f.write("let " + name + "_promise;\n")
    f.write("let " + name + "_value;\n")

f.write("""
function connectToHT() {
  progress.hidden = false;
  // Can only send commands once device is in developer mode.
  // Put device into developer mode by sending a special string to Anti DOS,
  // 7 to TX Power and 1 to Wake CPU on radio service.
  if (radioService == null) {
    navigator.bluetooth.requestDevice({
      filters: [{
        services: [0xFFFA]  // Headtracker Bluetooth Configuration Service
      }]
    })
    .then(device => {
      console.log('> Found ' + device.name);
      console.log('Connecting to GATT Server...');
      return device.gatt.connect();
    })
    .then(server => {
      gattServer = server;
      return gattServer.getPrimaryService(0xFFFA);
    })
    .then(service => {
      radioService = service;
      return radioService.getCharacteristic(0xF000); // Get first characteristic
    })
""")

first = True
_lastname = ""
_name = ""
_addr = ""
for row in s.settings:
  if row[s.colbleaddr].strip() != "":
    _name = row[s.colname].lower().strip()
    _addr = row[s.colbleaddr].upper().strip()
    if first == True:
      first = False
    else:
      txt = """\
    .then(characteristic => {{
      console.log(' Found {lname} Characteristic');
      {lname}_promise = characteristic;
      return {lname}_promise.readValue();
    }})
    .then(value => {{
      {lname}_value = value{jtype};
      console.log({lname}_value);
      return radioService.getCharacteristic(0x{addr}); // Get {name} characteristic
    }})
""".format(name = _name, lname = _lastname, addr = _addr, jtype = s.JSDataView(row[s.coltype]))
      f.write(txt)
    _lastname = _name

txt = """\
    .then(characteristic => {{
      console.log(' Found {lname} Characteristic');
      {lname}_promise = characteristic;
      return {lname}_promise.readValue();
      return false;
    }})
      .then(value => {{
      {lname}_value = value{jtype};
      console.log({lname}_value);
    }})
    .catch(error => {{ console.error(error); return true;}});
  }} else {{
    return true;
  }}
""".format(name = _name, lname = _lastname, addr = _addr, jtype = s.JSDataView(row[s.coltype]))
f.write(txt)

f.write("}\n")
f.close()

print("Generated WebBle Settings File blechars.js")
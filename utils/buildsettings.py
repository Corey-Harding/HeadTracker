from array import array
import csv

f = open("../firmware/src/src/trackersettingsNEW.h","w")
f.write("""\
/*
* This file is part of the Head Tracker distribution (https://github.com/dlktdr/headtracker)
* Copyright (c) 2022 Cliff Blackburn
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/**********************************************
 *
 *  !!! THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT DIRECTLY !!!
 *
 *  Modify /utils/settings.csv and execute settings.py to generate the GUI and FW headers
 *
 ***********************************************/

#pragma once

#include "arduinojsonwrp.h"

class TrackerSettings {
public:
""")

coltype = 0
coldata = 1
colname = 2
coldefault = 3
colmin = 4
colmax = 5
coldesc = 6

const = list()
data = list()
dataarrays = list()
settings = list()
settingsarrays = list()

with open('settings.csv', newline='') as csvfile:
    setns = csv.reader(csvfile, delimiter=',', quotechar='\"')
    itersetns = iter(setns)
    next(itersetns)
    for row in setns:
        if "const" in row[coldata].lower():
          const.append(row)
        if "setting" in row[coldata].lower():
          if "[" in row[colname]:
            settingsarrays.append(row)
          else:
            settings.append(row)
        if "data" in row[coldata].lower():
          if "[" in row[colname]:
            dataarrays.append(row)
          else:
            data.append(row)

def typeToC(type) :
  if type == "u8":
    return "uint8_t"
  if type == "s8":
    return "int8_t"
  if type == "u16":
    return "uint16_t"
  if type == "s16":
    return "int16_t"
  if type == "u32":
    return "uint32_t"
  if type == "s32":
    return "int32_t"
  return type

# Write the constants to the file
for row in const:
  f.write("  static constexpr "  + typeToC(row[coltype]) + " " + row[colname] + " = " + row[coldefault] + ";\n")

# Write the Constructor
f.write("\n  TrackerSettings() {\n")
for row in settingsarrays:
  start = row[colname].find("[")
  end = row[colname].find("]")
  arraylength = row[colname][start+1:end]
  name = row[colname][:start]
  f.write("    for(int i = 0; i < " + arraylength + "; i++) {\n")
  f.write("      " + name + "[i] = " + row[coldefault] + ";\n")
  f.write("    }\n  }\n")

# Write the get + set functions
f.write("\n")

for row in settings:
  txt = """\
  // {desc}
  inline {dtype} get{cname}() {{return {name};}}
  bool set{cname}({dtype} val={deflt}) {{
    if(val >= {minv} && val <= {maxv}) {{
      {name} = val;
      return true;
    }}
    return false;
  }}

""".format(cname = row[colname], name = row[colname].lower(), dtype = typeToC(row[coltype]), deflt = row[coldefault], minv = row[colmin], maxv = row[colmax], desc = row[coldesc] )
  f.write(txt)

# Get & Set for the Settings Arrays
for row in settingsarrays:
  start = row[colname].find("[")
  end = row[colname].find("]")
  arraylength = row[colname][start+1:end]
  txt = """\
  // {desc}
  void get{cname}({dtype} dest[{len}]) {{memcpy(dest, {name}, sizeof({dtype}) * {len});}}
  bool set{cname}(const {dtype} val[{len}]) {{
    for(int i=0; i < {len}; i++) {{
      if({name}[i] >= {minv} && {name}[i] <= {maxv}) {{
        {name}[i] = val[i];
      }}
    }}
  }}

""".format(cname = row[colname][:start], name = row[colname][:start].lower(), dtype = typeToC(row[coltype]), deflt = row[coldefault], minv = row[colmin], maxv = row[colmax], desc = row[coldesc], len = arraylength )
  f.write(txt)

# Write all JSON Settings
f.write("  void setJSONSettings(DynamicJsonDocument &json) {\n")
for row in settings:
  f.write("    json[\"" + row[colname].lower() + "\"] = " + row[colname].lower() + ";\n");
f.write("  }\n")

# Read JSON Settings
f.write("\n  void loadJSONSettings(DynamicJsonDocument &json) {\n    JsonVariant v;\n")
for row in settings:
  f.write("    v = json[\"" + row[colname].lower() + "\"]; if(!v.isNull()) set" + row[colname] + "(v);\n");
f.write("  }\n")

# Private Variables
f.write("\nprivate:")
f.write("\n  //Settings\n")
for row in settings:
  f.write("  " + typeToC(row[coltype]) + " " + row[colname].lower() + " = " + row[coldefault] + "; // " + row[coldesc] + "\n")

f.write("\n  //Setting Arrays\n")
for row in settingsarrays:
  f.write("  " + typeToC(row[coltype]) + " " + row[colname].lower() + "; // " + row[coldesc] + "\n")

f.write("\n  //Real Time Data\n")
for row in data:
  f.write("  " + typeToC(row[coltype]) + " " + row[colname].lower() + "; // " + row[coldesc] + "\n")

f.write("\n  //Real Time Data Arrays\n")
for row in dataarrays:
  f.write("  " + typeToC(row[coltype]) + " " + row[colname].lower() + "; // " + row[coldesc] + "\n")

# Close Class
f.write("}\n")

f.close()





